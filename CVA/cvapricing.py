# -*- coding: utf-8 -*-
"""CVApricing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kAFFsLP5rxGNOruLz83gqpT-1GT_wsbZ
"""

import math as mt
import numpy as np
from scipy.stats import norm
import scipy.integrate as sc
import matplotlib.pyplot as plt
rf = 0
PD = 0.078
lgd = 0.6
S0 = 500
T = 2
sigma = 150 * (T ** (-1/2))
K = 550
q = 0
lambda_ = 0.04 * (T ** (-1))
dt = 1/252 
num_steps = int(T / dt)
F0=S0
bachelierIntegrand = lambda T: ((F0 - K) * norm.cdf((F0 - K) / (sigma * mt.sqrt(T))) + 
                        sigma * mt.sqrt(T) * norm.pdf((F0 - K) / (sigma * mt.sqrt(T)))) * lambda_ * mt.exp(-lambda_ * T)

result = sc.quad(bachelierIntegrand, 0, 3)
cva = -0.6* result[0]

#Similar Montecarlo simulations


num_sim=100000
x=np.random.uniform(size=num_sim)
inverse_exp = lambda x, lambda_: -lambda_ * np.log(1 - x)
default_times = inverse_exp(np.random.uniform(size=num_sim), lambda_=1/lambda_)

# Create default times histogram
plt.hist(default_times, bins=50)

# Chart labels
plt.xlabel('Default times')
plt.ylabel('Number of simulations')
plt.title('Default times histogram')

# Show the chart
plt.show()

def underlying_price(S0, sigma, t, z):
    return S0 + sigma * mt.sqrt(t) * z
# Initialize X vector with all S0 values
X = np.full(num_sim, S0)

# For every default time evaluate X values
for i in range(num_sim):
    z = np.random.normal()
    t = default_times[i]
    X[i] = underlying_price(S0, sigma, t, z)

# Estimate V for every simulation
V = np.maximum(X - K, 0)


# Initialize CVA vector
CVA = np.zeros(num_sim)

# Compute CVA for every simulation
for i in range(num_sim):
    if default_times[i] <= 3:
        if V[i] > 0:
            CVA[i] = -0.6 * V[i]

# Calculate CVA's expected value
expected_CVA = np.mean(CVA)

# Estimate CVA's standard deviation
std_CVA = np.std(CVA)

# Esteem 98% confidence interval for the CVA
lower_CI = expected_CVA - 2.33 * std_CVA / np.sqrt(num_sim)
upper_CI = expected_CVA + 2.33 * std_CVA / np.sqrt(num_sim)

print("Il valore del CVA Ã¨:", cva)
print("Intervallo di confidenza al 98% per il CVA: ({:.4f}, {:.4f})".format(lower_CI, upper_CI))

# CVA values histogram
plt.hist(CVA, bins=50, density=True)

# Calculate probability density function of normal distribution
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, expected_CVA, std_CVA)

# Plot normal distribution curve
plt.plot(x, p, 'k', linewidth=2)

# Chart labels
plt.xlabel('CVA values')
plt.ylabel('Probability density')
plt.title('CVA values distribution')

# Show chart
plt.show()