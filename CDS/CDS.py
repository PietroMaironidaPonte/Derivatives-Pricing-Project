# -*- coding: utf-8 -*-
"""CDS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gSeQ_NDZklkP_OWZOZQQIZlS58TTan6D
"""

import scipy as sc
import numpy as np
from datetime import date
from scipy.optimize import least_squares
from sympy.physics.units import days
from sympy.matrices.expressions.blockmatrix import bounds


rec = 0.4
lgd = 1 - rec
zero_rate = 0.03
UF2 = 0.0126
UF4 = 0.0208
s = 0.01

# calendar

t = []
t.append(0.0)

for i in range(1,5):
  f_date = date(2022, 12, 20)
  l_date = date(2023, 3*i, 20)
  delta = l_date - f_date
  t.append(delta.days/360)
for i in range(1,5):
  f_date = date(2022, 12, 20)
  l_date = date(2024, 3*i, 20)
  delta = l_date - f_date
  t.append(delta.days/360)
for i in range(1,5):
  f_date = date(2022, 12, 20)
  l_date = date(2025, 3*i, 20)
  delta = l_date - f_date
  t.append(delta.days/360)
for i in range(1,5):
  f_date = date(2022, 12, 20)
  l_date = date(2026, 3*i, 20)
  delta = l_date - f_date
  t.append(delta.days/360)

# zero-coupon bond discount factor
p = lambda t: np.exp(-zero_rate*t)

def uf2(l):
  buyer = [p(t[i])*(np.exp(-l*t[i-1])-np.exp(-l*t[i])) for i in range(1,4*2 + 1)]
  b = sum(buyer)*lgd
  seller = [(t[i]-t[i-1])*p(t[i])*np.exp(-l*t[i]) for i in range(1,4*2 + 1)]
  ss = s*sum(seller)
  return b - ss

lambda2y = sc.optimize.least_squares(lambda x: uf2(x) - UF2, 2, bounds = (0, 10)).x[0]
print("intensity2y:", lambda2y)

def uf4(l):
  buyer = [p(t[i])*(np.exp(-l*(t[i-1]-t[8]))*np.exp(-lambda2y*t[8])-np.exp(-lambda2y*t[8])*np.exp(-l*(t[i]-t[8])))for i in range(9, 16+1)]
  b = sum(buyer)*lgd
  seller = [(t[i]-t[i-1])*p(t[i])*np.exp(-lambda2y*t[8])*np.exp(-l*(t[i]-t[8]))for i in range(9,16+1)]
  ss = s*sum(seller)
  return uf2(lambda2y) + b - ss

lambda4y = sc.optimize.least_squares(lambda x: uf4(x) - UF4,0.5, bounds = (0, 10)).x[0]
surv1y = np.exp(-lambda2y*t[4])
surv2y = np.exp(-lambda2y*t[8])
surv3y = np.exp(-lambda4y*(t[12]-t[8]))*np.exp(-lambda2y*t[8])
surv4y = np.exp(-lambda4y*(t[16]-t[8]))*np.exp(-lambda2y*t[8])

print("intensity 4y:", lambda4y)

print("surv_1y:_",surv1y)
print("surv_2y:_",surv2y)
print("surv_3y:_",surv3y)
print("surv_4y:_",surv4y)

import matplotlib.pyplot as plt

# calculate survival probabilities
survival_probs = [1, surv1y, surv2y, surv3y, surv4y]

# create time axis
t_axis = [0, t[4], t[8], t[12], t[16]]

# plot survival curve
plt.plot(t_axis, survival_probs, '-o')
plt.xlabel('Time (years)')
plt.ylabel('Survival probability')
plt.title('Survival Curve')
plt.show()

# create time axis
t_axis = np.array([0] + t)

# calculate default probabilities
default_probs = [1 - np.exp(-lambda2y*t_axis[i]) for i in range(len(t_axis))]

# calculate CDS spreads
cds_spreads = [s / (1 - default_probs[i]) for i in range(len(default_probs))]

# plot CDS curve
plt.plot(t_axis, cds_spreads, '-o')
plt.xlabel('Time (years)')
plt.ylabel('CDS spread (%)')
plt.title('CDS Pricing Curve')
plt.show()